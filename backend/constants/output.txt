AuthConstants.js
const AuthConstants = {
    TokenNotFound: "Token not found in the request",
    InvalidOrExpiredToken: "Invalid or expired token",
    AdminOnly: "Access denied. Admins only resource",
    UserMismatch: "Access denied. Invalid user to perform the action",
    JwtExpiration: "1h"
}

module.exports = { AuthConstants };
cmb.py
import os

def combine_files_to_text(directory, output_file):
    with open(output_file, 'w') as outfile:
        for filename in os.listdir(directory):
            file_path = os.path.join(directory, filename)
            if os.path.isfile(file_path):
                with open(file_path, 'r') as infile:
                    outfile.write(f"{filename}\n")
                    outfile.write(infile.read())
                    outfile.write("\n")

# Example usage:
combine_files_to_text('.', 'output.txt')


DatabaseConstants.js
const DatabaseConstants = {
    ConnectionSuccessful: "Database connection established successfully.",
    ConnectionFailed: "Error connecting to the database: ",
    SyncSuccessful: "Database synced.",
    SyncFailed: "Error syncing database: ",
    ValidationErrors: {
        InvalidBookedTickets: "Booked tickets cannot exceed total tickets."
    }
}

module.exports.DatabaseConstants = DatabaseConstants;
HttpStatusCodeConstants.js
const HttpStatusCodeConstants = {
    InternalServerError: 500,
    BadRequest: 400,
    Unauthorized: 401,
    Forbidden: 403,
    NotFound: 404,
    UnProcessable: 422,
    Created: 201,
    Ok: 200
}

module.exports.HttpStatusCodeConstants = HttpStatusCodeConstants;
output.txt

ResponseConstants.js
const ResponseConstants = {
  Admin: {
    SuccessCreation: "Admin created successfully",
    SuccessGet: "All Admins fetched successfully",
    SuccessGetById: "Admin fetched successfully",
    SuccessUpdate: "Admin updated successfully",
    SuccessDeletion: "Admin deleted successfully",
    Error: {
      NotFound: "Admin not found",
      AllFieldsRequired: "All fields are required",
      InternalServerError: "Internal Server Error",
    },
  },
  Comment: {
    SuccessCreation: "Comment created successfully",
    SuccessGet: "All Comments fetched successfully",
    SuccessGetById: "Comment fetched successfully",
    SuccessUpdate: "Comment updated successfully",
    SuccessDeletion: "Comment deleted successfully",
    Error: {
      NotFound: "Comment not found",
      AllFieldsRequired: "All fields are required",
      InternalServerError: "Internal Server Error",
    },
  },
  Company: {
    SuccessCreation: "Company created successfully",
    SuccessGet: "All Companies fetched successfully",
    SuccessGetById: "Company fetched successfully",
    SuccessUpdate: "Company updated successfully",
    SuccessDeletion: "Company deleted successfully",
    Error: {
      NotFound: "Company not found",
      AllFieldsRequired: "All fields are required",
      InternalServerError: "Internal Server Error",
    },
  },
  Journey: {
    SuccessCreation: "Journey created successfully",
    SuccessGet: "All Journeys fetched successfully",
    SuccessGetById: "Journey fetched successfully",
    SuccessUpdate: "Journey updated successfully",
    SuccessDeletion: "Journey deleted successfully",
    Error: {
      NotFound: "Journey not found",
      AllFieldsRequired: "All fields are required",
      InternalServerError: "Internal Server Error",
    },
  },
  PlacementDrive: {
    SuccessCreation: "Placement Drive created successfully",
    SuccessGet: "All Placement Drives fetched successfully",
    SuccessGetById: "Placement Drive fetched successfully",
    SuccessUpdate: "Placement Drive updated successfully",
    SuccessDeletion: "Placement Drive deleted successfully",
    Error: {
      NotFound: "Placement Drive not found",
      AllFieldsRequired: "All fields are required",
      InternalServerError: "Internal Server Error",
    },
  },
  Query: {
    SuccessCreation: "Query created successfully",
    SuccessGet: "All Queries fetched successfully",
    SuccessGetById: "Query fetched successfully",
    SuccessUpdate: "Query updated successfully",
    SuccessDeletion: "Query deleted successfully",
    Error: {
      NotFound: "Query not found",
      AllFieldsRequired: "All fields are required",
      InternalServerError: "Internal Server Error",
    },
  },
  Skill: {
    SuccessCreation: "Skill created successfully",
    SuccessGet: "All Skills fetched successfully",
    SuccessGetById: "Skill fetched successfully",
    SuccessUpdate: "Skill updated successfully",
    SuccessDeletion: "Skill deleted successfully",
    Error: {
      NotFound: "Skill not found",
      AllFieldsRequired: "All fields are required",
      InternalServerError: "Internal Server Error",
    },
  },
  Student: {
    SuccessCreation: "Student created successfully",
    SuccessGet: "All Students fetched successfully",
    SuccessGetById: "Student fetched successfully",
    SuccessUpdate: "Student updated successfully",
    SuccessDeletion: "Student deleted successfully",
    Error: {
      NotFound: "Student not found",
      AllFieldsRequired: "All fields are required",
      InternalServerError: "Internal Server Error",
    },
  },
  StudentSkill: {
    SuccessCreation: "Student Skill created successfully",
    SuccessGet: "All Student Skills fetched successfully",
    SuccessGetById: "Student Skill fetched successfully",
    SuccessUpdate: "Student Skill updated successfully",
    SuccessDeletion: "Student Skill deleted successfully",
    Error: {
      NotFound: "Student Skill not found",
      AllFieldsRequired: "All fields are required",
      InternalServerError: "Internal Server Error",
    },
  },
};

module.exports.ResponseConstants = ResponseConstants;


ValidationConstants.js
const RegisterUserValidationConstants = {
    NameString: "Name must be a string",
    NameNotEmpty: "Name should not be null or empty",
    EmailInvalid: "Email is invalid",
    PasswordNotEmpty: "Password should not be null or empty",
    PasswordLength: "Password must be atleast 8 characters"
}

module.exports = { 
    RegisterUserValidationConstants
}
